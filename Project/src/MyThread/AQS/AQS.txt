AQS，AbstractQueuedSynchronizer(抽象类)，抽象同步队列，是实现同步器的基础组件，
并发包中锁的底层也是使用AQS实现的

AQS是一个双向队列，在Node节点中
用thread变量来存放线程，SHARED是标记该线程是获取共享资源时被阻塞放进AQS队列的，
EXCLUSIVE是用来标记获取独占资源被阻塞放进AQS队列的
还有waitStatus记录线程的等待状态，还有prev，next记录前后驱节点

AQS最重要的是维护了一个state状态信息（int类型），线程同步的关键就是对state进行操作
对不同类型的具体实现来说，state可以是可重入次数，计数器的值，
还有用高低16位分别表示读写状态和可重入次数

AQS内部有个内部类ConditionObject，用来结合锁来实现线程同步
可以直接访问AQS内部变量，且属于条件变量，对应一个条件队列
用来存放调用条件变量await方法后被阻塞的线程

使用独占方式获取资源是与具体线程绑定的，被获取后，其他线程再尝试操作state
获取资源会发现不是自己持有的，就会失败阻塞

共享资源的获取与具体线程是不相关的，当一个线程获取后，其他线程再获取时
只要资源还能满足需求，只需要使用CAS方式继续获取即可

AQS类没有提供可用tryAcquire和tryRelease，需要具体的子类实现
tryAcquireShared和tryReleaseShared也需要具体的子类实现

带Interruptibly的方法要求对中断进行响应，也就是被中断的话会抛出异常返回

当线程获取锁失败后就会被转换为Node节点，然后将该节点插入到AQS的阻塞队列

ReentrantLock是基于AQS实现的，其中  .newCondition方法其实是
new了一个在AQS内部声明的ConditionObject对象。（见13-15行）
注，newCondition需要子类提供

当多个线程调用lock()方法获取锁时，只有一个线程获取到了锁，其他线程
会被转换为Node节点插入到锁对应的AQS阻塞队列中，并自旋CAS尝试获取锁

如果获取到锁的线程又调用了对应的条件变量的await方法，则线程会释放锁，
并转换为Node节点插入到条件队列中

当一个线程调用条件变量的signal或者signalAll时，会把条件队列里的一个或者
全部Node节点移动到AQS的阻塞队列里，等待时机获取锁






